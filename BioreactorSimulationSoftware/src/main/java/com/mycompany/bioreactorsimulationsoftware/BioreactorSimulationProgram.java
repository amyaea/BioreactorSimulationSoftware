/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.bioreactorsimulationsoftware;

/**
 *
 * @author yegor
 */

import java.awt.Color;
import java.awt.EventQueue;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
//import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

import javax.swing.SwingUtilities;
import javax.swing.Timer;

public class BioreactorSimulationProgram extends javax.swing.JFrame {
    
    //Constants declaration
        static double Xmax = 55.17;
        static double Ks = 6.026;
        static double Yxs = 0.33;
        static double beta = 0.05;
        
        // I made these static so that they can be global and be used directly inside the createGraph method
        static double U, Xo, time, iniSubCon, brothVol;
    

    /**
     * Creates new form BioreactorSimulationProgram
     */
    public BioreactorSimulationProgram() {
        initComponents();
        
        this.setBounds(0, 0, 1250, 540);
        
        this.setTitle("Bioethanol Simulation");
        
        EventQueue.invokeLater(() ->
                {
                    getContentPane().setBackground(Color.darkGray);
                });
        
        createGraph(true);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        iniBioConTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        iniSubConTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        timeTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        impSpeTextField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        finBioConTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        finEthConTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        unitCost = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        broVolTextField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        finSubAmoTextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 255));
        jLabel1.setText("Parameters");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(130, 0, 130, 30);

        jLabel2.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Initial Biomass Concentration:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 40, 190, 30);

        iniBioConTextField.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        getContentPane().add(iniBioConTextField);
        iniBioConTextField.setBounds(200, 40, 90, 30);

        jLabel5.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("g");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(270, 420, 10, 30);

        jLabel4.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Initial Substrate Amount:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 80, 160, 30);

        iniSubConTextField.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        iniSubConTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniSubConTextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(iniSubConTextField);
        iniSubConTextField.setBounds(170, 80, 90, 30);

        jLabel12.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("g/L");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(300, 340, 25, 30);

        jLabel6.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Fermentation Time:");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 117, 130, 30);

        timeTextField.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        getContentPane().add(timeTextField);
        timeTextField.setBounds(140, 120, 90, 30);

        jLabel7.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("h");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(240, 120, 10, 30);

        jLabel8.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Impeller's Speed:");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(10, 200, 110, 30);

        jLabel9.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("RPM");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(220, 200, 40, 30);

        runButton.setBackground(new java.awt.Color(51, 255, 0));
        runButton.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        runButton.setText("Run the simulation");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        getContentPane().add(runButton);
        runButton.setBounds(70, 240, 163, 40);

        resetButton.setBackground(new java.awt.Color(0, 255, 255));
        resetButton.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(resetButton);
        resetButton.setBounds(240, 240, 90, 40);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 290, 400, 10);

        jLabel10.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 0, 51));
        jLabel10.setText("Results");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(140, 300, 90, 20);

        impSpeTextField.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        getContentPane().add(impSpeTextField);
        impSpeTextField.setBounds(120, 200, 90, 30);

        jLabel13.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Final Substrate Amount:");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(10, 420, 160, 25);

        finBioConTextField.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        getContentPane().add(finBioConTextField);
        finBioConTextField.setBounds(200, 340, 90, 30);

        jLabel3.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("g/L");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(300, 40, 20, 30);

        finEthConTextField.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        getContentPane().add(finEthConTextField);
        finEthConTextField.setBounds(160, 380, 90, 30);

        jLabel14.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("g/L");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(260, 380, 20, 30);

        jLabel11.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Final Biomass Concentration:");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(10, 340, 190, 20);

        jLabel19.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Unit Cost:");
        getContentPane().add(jLabel19);
        jLabel19.setBounds(10, 460, 70, 30);

        unitCost.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        getContentPane().add(unitCost);
        unitCost.setBounds(80, 460, 90, 30);

        jLabel20.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("$/g/L");
        getContentPane().add(jLabel20);
        jLabel20.setBounds(180, 460, 40, 30);

        jLabel21.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Broth Volume:");
        getContentPane().add(jLabel21);
        jLabel21.setBounds(10, 160, 100, 30);

        broVolTextField.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        getContentPane().add(broVolTextField);
        broVolTextField.setBounds(110, 160, 90, 30);

        jLabel22.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("L");
        getContentPane().add(jLabel22);
        jLabel22.setBounds(210, 160, 10, 30);

        jPanel1.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanel1);
        jPanel1.setBounds(400, 0, 420, 500);

        finSubAmoTextField.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        getContentPane().add(finSubAmoTextField);
        finSubAmoTextField.setBounds(170, 420, 90, 30);

        jLabel15.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Ethanol Concentration:");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(10, 380, 150, 25);

        jLabel16.setFont(new java.awt.Font("Liberation Sans", 0, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("g");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(270, 80, 10, 30);

        jPanel2.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanel2);
        jPanel2.setBounds(825, 0, 420, 500);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        iniBioConTextField.setText(null);
        iniSubConTextField.setText(null);
        timeTextField.setText(null);
        broVolTextField.setText(null);
        impSpeTextField.setText(null);
        
        finBioConTextField.setText(null);
        finEthConTextField.setText(null);
        //rateOfEthConTextField.setText(null); removed
        //yieldOfEthTextField.setText(null); removed
        finSubAmoTextField.setText(null);
        unitCost.setText(null);
        
        createGraph(true);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void iniSubConTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniSubConTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_iniSubConTextFieldActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        
        //The variables below are for checking if the parameters are in the safe ranges
        boolean safeRange=false;
        
        double timeTF = Double.parseDouble(timeTextField.getText());
        double iniBioConTF = Double.parseDouble(iniBioConTextField.getText());
        double iniSubConTF = Double.parseDouble(iniSubConTextField.getText());
        double impSpeTF = Double.parseDouble(impSpeTextField.getText());
        double broVolTF = Double.parseDouble(broVolTextField.getText());
        
        if( timeTF<100 && (iniBioConTF>0.999&&iniBioConTF<44.001) && (iniSubConTF>0.599&&iniSubConTF<200.001) && (impSpeTF>100&&impSpeTF<700) && (broVolTF>0.5&&broVolTF<50) )
            safeRange=true;
        
        if(safeRange){

        //Constants declaration is global at line 27, the reason is I wanted to make them global
        
        
        
        //Umax is not a constant anymore
        double N = Double.parseDouble(impSpeTextField.getText());
        final double Umax = 0.03*(Math.pow(N, 0.5));
        //Debug
        System.out.println("Umax="+Umax);

        //Steps for calculations
        
        //1.Calculate initial biomass
        double iniBio = Double.parseDouble(iniBioConTextField.getText());
        brothVol = Double.parseDouble(broVolTextField.getText());
        Xo = iniBio; // broth volume has been removed
        
        //2.Apply the Monod Equation
        iniSubCon = Double.parseDouble(iniSubConTextField.getText());
        U = Umax*(iniSubCon/(Ks+iniSubCon));
        //Debug
        System.out.println("U="+U);
        
        //3.Calculate biomass at time X[t]
        time = Double.parseDouble(timeTextField.getText());
        double X_t = Xmax/(1+((Xmax-Xo)/Xo)*Math.exp(-U*time));
        //Debug
        System.out.println("X(t)="+X_t);
        
        //4.Estimate sugar consumed
        //Assume 90% of the substrate is consumed
        double sugarUsed = iniSubCon*0.9;
        //Debug
        System.out.println("Sugar consumed="+sugarUsed);
        
        //5.Estimate ethanol produced(P)
        double P = Yxs * X_t + beta * time;
        //Debug
        System.out.println("P="+P);
        
        //6.Final Biomass concentration
        double finBio = X_t; // waterVol variable has been removed
        String fN1 = String.format("%.3f", finBio);
        finBioConTextField.setText(fN1);
        
        //7.Final ethanol concentration
        double finEthanCon = P / brothVol;
        String fN2 = String.format("%.3f", finEthanCon);
        finEthConTextField.setText(fN2);
        //Debug
        System.out.println("Ethanol concentration="+finEthanCon);
        
        /*8.Calculate rate of ethanol Production
        double rateOfEthanol = finEthanCon / time;
        String fN3 = String.format("%.3f", rateOfEthanol);
        rateOfEthConTextField.setText(fN3);
        //Debug
        System.out.println("Rate of ethanol="+rateOfEthanol); removed*/
        
        //9.Calculate substrate concentration
        double subConsumed = 1.95652173913*finEthanCon*brothVol;
        double finSubCon = iniSubCon - subConsumed;
        String fN4 = String.format("%.3f", finSubCon);
        finSubAmoTextField.setText(fN4);
        //Debug
        System.out.println("Substrate consumed="+subConsumed);
        
        /*10.Calculate yield
        double yield = P/(iniSubCon - finSubCon);
        String fN5 = String.format("%.3f", yield);
        yieldOfEthTextField.setText(fN5);
        //Debug
        System.out.println("Yield="+yield); removed*/
        
        
        //11.Final analysis
        
        //Convert Sub consumed from "g" to "kg" by dividing by 1000
        //double convertSubConsumed = subConsumed/1000;
        
        //unit cost
        double uCost = 0.65*finEthanCon;
        String fN6 = String.format("%.3f", uCost);
        unitCost.setText(fN6);
        //Debug
        System.out.println("Unit cost="+uCost);
        

        createGraph(false);
        
        }
        
        else JOptionPane.showMessageDialog(null, "The parameter values are invaild!", "ERROR", ERROR_MESSAGE);
    }//GEN-LAST:event_runButtonActionPerformed

    
    
    
    
    void createGraph(boolean emptyGraph){
        
        jPanel1.removeAll(); // Clear previous components
        jPanel1.repaint();   // Refresh the panel
        
        jPanel2.removeAll();
        jPanel2.repaint();
        
        if(emptyGraph){
        
        XYSeries s = new XYSeries("");
        
        s.add(0, 0);
        
        XYSeriesCollection ds = new XYSeriesCollection(s);
        
        JFreeChart chart = ChartFactory.createXYLineChart(
                "",  // Chart title
                "Time (h)",            // X Axis label
                "",            // Y Axis label
                ds,             // Dataset
                org.jfree.chart.plot.PlotOrientation.VERTICAL, // Plot orientation
                true,                // Show legend
                true,                // Use tooltips
                false                // Configure chart to generate URLs
        );
        
        ChartPanel cp1 = new ChartPanel(chart);
        cp1.setPreferredSize(new java.awt.Dimension(510, 500));
        
        ChartPanel cp2 = new ChartPanel(chart);
        cp2.setPreferredSize(new java.awt.Dimension(510, 500));
        
        jPanel1.add(cp1);
        jPanel1.revalidate();
        jPanel1.repaint();
        
        jPanel2.add(cp2);
        jPanel2.revalidate(); // Refresh the layout
        jPanel2.repaint();}
        
        
        
        
        //This condition calculates X(t), S and P at each time starting from 0 until the fermentation time
        if(!emptyGraph){
           
        // Create a series of data points (x, y)
        XYSeries bS = new XYSeries("Biomass concentration (g/L)");
        XYSeries sS = new XYSeries("");
        XYSeries eS = new XYSeries("Ethanol concentration (g/L)");
        
        // Create a dataset using the series
        XYSeriesCollection dataset1 = new XYSeriesCollection();
        XYSeriesCollection dataset2 = new XYSeriesCollection();
        
        dataset1.addSeries(sS);
        dataset2.addSeries(bS);
        dataset2.addSeries(eS);

        // Create the chart
        JFreeChart chart1 = ChartFactory.createXYLineChart(
                "Substrate",  // Chart title
                "Time (h)",            // X Axis label
                "Substrate consumption (g)",            // Y Axis label
                dataset1,             // Dataset
                org.jfree.chart.plot.PlotOrientation.VERTICAL, // Plot orientation
                false,                // Show legend
                true,                // Use tooltips
                false                // Configure chart to generate URLs
        );
        
        // Create the chart
        JFreeChart chart2 = ChartFactory.createXYLineChart(
                "Biomass & Ethanol",  // Chart title
                "Time (h)",            // X Axis label
                "",            // Y Axis label
                dataset2,             // Dataset
                org.jfree.chart.plot.PlotOrientation.VERTICAL, // Plot orientation
                true,                // Show legend
                true,                // Use tooltips
                false                // Configure chart to generate URLs
        );

        // Create a ChartPanel (which is a Swing component to hold the chart)
        ChartPanel chartPanel1 = new ChartPanel(chart1);
        chartPanel1.setPreferredSize(new java.awt.Dimension(510, 500));  // Set size of the chart panel
        
        ChartPanel chartPanel2 = new ChartPanel(chart2);
        chartPanel2.setPreferredSize(new java.awt.Dimension(510, 500));

        // Add the ChartPanel to the content pane of the JFrame
        jPanel1.add(chartPanel1);
        jPanel1.revalidate();
        
        jPanel2.add(chartPanel2);
        jPanel2.revalidate();
        
        System.out.print("\n");
        
        double[] timeSum = {0};
        
        Timer timer = new Timer(100, e -> {
            
        if (timeSum[0] > time) {
            
            ((Timer) e.getSource()).stop();
            return;
            
        }

        double XTime = Xmax / (1 + ((Xmax - Xo) / Xo) * Math.exp(-U * timeSum[0]));
        double finBioCon = XTime; // waterVol variable has been removed
        double ethPro = Yxs * XTime + beta * timeSum[0];
        double finEthCon = ethPro / brothVol;
        double subCon = 1.95652173913 * finEthCon*brothVol;
        double subTime = iniSubCon - subCon;

        SwingUtilities.invokeLater(() -> {
            
            sS.add(timeSum[0], subTime);
            bS.add(timeSum[0], finBioCon);
            eS.add(timeSum[0], finEthCon);
            
            jPanel1.revalidate();
            jPanel1.repaint();
            
            jPanel2.revalidate();
            jPanel2.repaint();
            
            //Debug
            System.out.println("X("+timeSum[0]+")="+finBioCon);
            System.out.println("S("+timeSum[0]+")="+subTime);
            System.out.println("P("+timeSum[0]+")="+ethPro);
            
            System.out.print("\n");
            
        });

        timeSum[0] += 0.1;
        
    });

    timer.start();
    
        }
        
        }
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BioreactorSimulationProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BioreactorSimulationProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BioreactorSimulationProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BioreactorSimulationProgram.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BioreactorSimulationProgram().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField broVolTextField;
    private javax.swing.JTextField finBioConTextField;
    private javax.swing.JTextField finEthConTextField;
    private javax.swing.JTextField finSubAmoTextField;
    private javax.swing.JTextField impSpeTextField;
    private javax.swing.JTextField iniBioConTextField;
    private javax.swing.JTextField iniSubConTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton runButton;
    private javax.swing.JTextField timeTextField;
    private javax.swing.JTextField unitCost;
    // End of variables declaration//GEN-END:variables
}
